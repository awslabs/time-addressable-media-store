AWSTemplateFormatVersion: "2010-09-09"

Description: TAMS API VPC Stack

Mappings:

  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Private0:
      CIDR: 10.0.11.0/24
    Private1:
      CIDR: 10.0.12.0/24

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: Flow Logs not required
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !FindInMap [SubnetConfig, Private0, CIDR]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !FindInMap [SubnetConfig, Private1, CIDR]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-1

  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-0

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-1

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable0
        - !Ref PrivateRouteTable1

  DynamoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      RouteTableIds:
        - !Ref PrivateRouteTable0
        - !Ref PrivateRouteTable1

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
        - id: W9
          reason: VPC cidr only
        - id: W29
          reason: Not relevant.
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Endpoints
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          Description: Disallow all traffic
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !FindInMap [SubnetConfig,  VPC, CIDR]
          Description: https only inbound
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  SqsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  EventsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.events
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  SsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  LambdaEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.lambda
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

Outputs:

  VpcId:
    Description: The Id of the Vpc
    Value: !Ref Vpc

  VpcAZs:
    Description: The AWS AZs used by this VPC
    Value: !Join [",", [!GetAtt PrivateSubnet0.AvailabilityZone, !GetAtt PrivateSubnet1.AvailabilityZone]]

  PrivateSubnetIds:
    Description: SubnetId of private subnets
    Value: !Join [",", [!Ref PrivateSubnet0, !Ref PrivateSubnet1]]
