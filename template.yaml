AWSTemplateFormatVersion: "2010-09-09"

Description: Time-addressable Media Store API implementation (uksb-yzlyq9dyct)

Parameters:
  EnableWebhooks:
    Description: Configure whether this platform will support webhooks or not.
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  VpcId:
    Description: The ID of an existing VPC, if one exists. Leave blank to have one created.
    Type: String
    Default: ""
    AllowedPattern: '|vpc-[a-z0-9]+'

  VpcAZs:
    Description: Comma-separated list of availability zones (e.g. `us-east-1a,us-east-1b`) to use when a VPC is specified. The number of AZs must match the number of private subnets specified in PrivateSubnetIds.
    Type: CommaDelimitedList
    Default: ""

  PrivateSubnetIds:
    Description: Comma-separated list of private subnets (e.g. subnet-abc123,subnet-def456) to use when a VPC is specified. Must provide exactly one subnet per Availability Zone specified in VpcAZs.
    Type: CommaDelimitedList
    Default: ""
    AllowedPattern: '|subnet-[a-z0-9]+'

  NeptuneServerlessConfiguration:
    Description: Neptune Serverless Scaling Configuration.
    Type: String
    Default: 1,128
    ConstraintDescription: ServerlessScalingConfiguration must be a list of two values, MinCapacity and MaxCapacity, separated by commas. Valid values between 1-128.
    AllowedPattern: (12[0-8]|1[01][0-9]|[1-9][0-9]|[1-9]),(12[0-8]|1[01][0-9]|[1-9][0-9]|[1-9])

  DeployWaf:
    Description: Configure whether a WAF should be deployed infront of the API.
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

Mappings:
  Solution:
    Constants:
      ApiVersion: "7.0"
      ServiceVersion: "4.0"

  OAuth:
    Scopes:
      CognitoAdmin: aws.cognito.signin.user.admin
      Head: tams-api/read
      Get: tams-api/read
      Put: tams-api/write
      Post: tams-api/write
      Delete: tams-api/delete

Conditions:
  SupportWebhooks: !Equals [!Ref EnableWebhooks, "Yes"]

  CreateVpc: !Equals [!Ref VpcId, ""]

  CreateWaf: !Equals [!Ref DeployWaf, "Yes"]

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Tracing: Active
    Timeout: 30
    MemorySize: 1024
    Handler: app.lambda_handler
    Runtime: python3.13
    Architectures:
      - arm64
    VpcConfig:
      SubnetIds: !If [CreateVpc, !Split [',', !GetAtt VpcStack.Outputs.PrivateSubnetIds], !Ref PrivateSubnetIds]
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup

Resources:
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Ref AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: True

  CognitoUtilsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      Tracing: Disabled
      VpcConfig: !Ref AWS::NoValue
      CodeUri: functions/cognito_utils/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPool
                - cognito-idp:AdminGetUser
                - cognito-idp:DescribeUserPoolClient
              Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: Time-addressable Media Store
      Description: |
        The Time-addressable Media Store (TAMS) is used for storing segmented media flows.
        The TAMS consists of a media store for the media flow segment objects and a service providing
        a database index of the flow segments. This document is a specification of the service API.

        See the [bbc/tams](https://github.com/bbc/tams) repository for more background on TAMS.

        **Note**: the examples provided in this specification are for a system which uses a media
        store that provides HTTP URLs for uploading and downloading media objects in buckets. This
        could for example be implemented using an AWS S3 compatible store using presigned URLs or by
        a simple file system storage with an HTTP frontend. Clients should parse the /service endpoint
        and handle the media store type in use appropriately.
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: True
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: True
          LoggingLevel: INFO
          MetricsEnabled: True
      StageName: Prod
      AlwaysDeploy: True
      Variables:
        api_version: !FindInMap [Solution, Constants, ApiVersion]
        service_version: !Sub
          - aws.${ServiceVersion}
          - ServiceVersion: !FindInMap [Solution, Constants, ServiceVersion]
        webhooks_enabled: !Ref EnableWebhooks
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False
        DefaultAuthorizer: Authorizor
        Authorizers:
          Authorizor:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization

  ServiceTable:
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W74
            reason: Encryption not required
          - id: W78
            reason: Backup not required
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: record_type
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: record_type
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  FlowSegmentsTable:
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W74
            reason: Encryption not required
          - id: W78
            reason: Backup not required
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: flow_id
          AttributeType: S
        - AttributeName: timerange_end
          AttributeType: "N"
        - AttributeName: object_id
          AttributeType: S
      KeySchema:
        - AttributeName: flow_id
          KeyType: HASH
        - AttributeName: timerange_end
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: object-id-index
          KeySchema:
            - AttributeName: object_id
              KeyType: HASH
            - AttributeName: flow_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  WebhooksTable:
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W74
            reason: Encryption not required
          - id: W78
            reason: Backup not required
    Properties:
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      AttributeDefinitions:
        - AttributeName: event
          AttributeType: S
        - AttributeName: url
          AttributeType: S
      KeySchema:
        - AttributeName: event
          KeyType: HASH
        - AttributeName: url
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: url-index
          KeySchema:
            - AttributeName: url
              KeyType: HASH
            - AttributeName: event
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
    Condition: SupportWebhooks

  FlowStorageTable:
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W74
            reason: Encryption not required
          - id: W78
            reason: Backup not required
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: object_id
          AttributeType: S
        - AttributeName: flow_id
          AttributeType: S
      KeySchema:
        - AttributeName: object_id
          KeyType: HASH
        - AttributeName: flow_id
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expire_at
        Enabled: true

  MediaStorageBucket:
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logging not required
          - id: W51
            reason: Bucket policy not required
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: False
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DeleteRequestQueue:
    Type: AWS::SQS::Queue
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: Encryption not required
    Properties:
      VisibilityTimeout: 900
      MessageRetentionPeriod: 86400

  CleanupS3Queue:
    Type: AWS::SQS::Queue
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: Encryption not required
    Properties:
      VisibilityTimeout: 900
      MessageRetentionPeriod: 86400

  WebhooksDeliveryQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      VisibilityTimeout: 30
      MessageRetentionPeriod: 86400
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WebhooksDeliveryQueueDLQ.Arn
        maxReceiveCount: 1
    Condition: SupportWebhooks

  WebhooksDeliveryQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      VisibilityTimeout: 30
      MessageRetentionPeriod: 86400
    Condition: SupportWebhooks

  WebhooksDeliveryQueueDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: TAMS Webhooks DLQ Queue has visible messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Average
      Dimensions:
        - Name: QueueName
          Value: !GetAtt WebhooksDeliveryQueueDLQ.QueueName
      Period: 300
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
    Condition: SupportWebhooks

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref AWS::StackName

  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: arm64
    Properties:
      RetentionPolicy: Delete
      ContentUri: layers/utils/
      CompatibleRuntimes:
        - python3.13
      CompatibleArchitectures:
        - arm64

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Outbound https to all epxected
    Properties:
      GroupDescription: Security group for Vpc Lambdas
      VpcId: !If [CreateVpc, !GetAtt VpcStack.Outputs.VpcId, !Ref VpcId]
      SecurityGroupEgress:
        - Description: Explicit egress group locking down outbound access to only HTTPS
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 443
          FromPort: 443
        - Description: Explicit egress group locking down outbound access to only Neptune
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 8182
          FromPort: 8182

  ServiceFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_service/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-service
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          SERVICE_TABLE: !Ref ServiceTable
          WEBHOOKS_TABLE: !If [SupportWebhooks, !Ref WebhooksTable, !Ref 'AWS::NoValue']
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - !GetAtt ServiceTable.Arn
      Events:
        headRoot:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getRoot:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headService:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getService:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        postService:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service
            Method: Post
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Post]
        headServiceWebhooks:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service/webhooks
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getServiceWebhooks:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service/webhooks
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        postServiceWebhooks:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service/webhooks
            Method: Post
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Post]
        headStorageBackends:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service/storage-backends
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getStorageBackends:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /service/storage-backends
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        anyRoot:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: Any
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
                - !FindInMap [OAuth, Scopes, Get]
                - !FindInMap [OAuth, Scopes, Put]
                - !FindInMap [OAuth, Scopes, Post]
                - !FindInMap [OAuth, Scopes, Delete]
        proxyPath:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{proxy+}
            Method: Any
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
                - !FindInMap [OAuth, Scopes, Get]
                - !FindInMap [OAuth, Scopes, Put]
                - !FindInMap [OAuth, Scopes, Post]
                - !FindInMap [OAuth, Scopes, Delete]

  ServiceFunctionRoleWebhooksPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref ServiceFunctionRole
      PolicyName: dynamodb
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:BatchWriteItem
            Resource:
              - !GetAtt WebhooksTable.Arn
              - !Sub ${WebhooksTable.Arn}/index/url-index
    Condition: SupportWebhooks

  SourcesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_sources/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-sources
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          EVENT_BUS: !Ref EventBus
          COGNITO_LAMBDA_NAME: !Ref CognitoUtilsFunction
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EventBus.Arn
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt CognitoUtilsFunction.Arn
            - Effect: Allow
              Action:
                - neptune-db:ReadDataViaQuery
                - neptune-db:WriteDataViaQuery
                - neptune-db:DeleteDataViaQuery
              Resource: !Sub arn:${AWS::Partition}:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneStack.Outputs.ClusterResourceId}/*
              Condition:
                StringEquals:
                  neptune-db:QueryLanguage: OpenCypher
      Events:
        headSources:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSources:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headSourcesSourceid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSourcesSourceid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headSourcesSourceidTags:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSourcesSourceidTags:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headSourcesSourceidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags/{name}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSourcesSourceidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags/{name}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putSourcesSourceidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags/{name}
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteSourcesSourceidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/tags/{name}
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headSourcesSourceidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/description
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSourcesSourceidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/description
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putSourcesSourceidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/description
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteSourcesSourceidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/description
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headSourcesSourceidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/label
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getSourcesSourceidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/label
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putSourcesSourceidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/label
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteSourcesSourceidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sources/{sourceId}/label
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]

  FlowsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W76
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_flows/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-flows
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          EVENT_BUS: !Ref EventBus
          SERVICE_TABLE: !Ref ServiceTable
          SEGMENTS_TABLE: !Ref FlowSegmentsTable
          STORAGE_TABLE: !Ref FlowStorageTable
          COGNITO_LAMBDA_NAME: !Ref CognitoUtilsFunction
          DELETE_QUEUE_URL: !Ref DeleteRequestQueue
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EventBus.Arn
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt CognitoUtilsFunction.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt ServiceTable.Arn
                - !GetAtt FlowSegmentsTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt ServiceTable.Arn
                - !GetAtt FlowStorageTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt FlowStorageTable.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub ${MediaStorageBucket.Arn}/*
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt DeleteRequestQueue.Arn
            - Effect: Allow
              Action:
                - neptune-db:ReadDataViaQuery
                - neptune-db:WriteDataViaQuery
                - neptune-db:DeleteDataViaQuery
              Resource: !Sub arn:${AWS::Partition}:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneStack.Outputs.ClusterResourceId}/*
              Condition:
                StringEquals:
                  neptune-db:QueryLanguage: OpenCypher
      Events:
        headFlows:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlows:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headFlowsFlowid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowid:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidTags:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidTags:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headFlowsFlowidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags/{name}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags/{name}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags/{name}
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidTagsName:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/tags/{name}
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/description
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/description
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/description
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidDescription:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/description
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/label
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/label
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/label
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidLabel:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/label
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidFlowCollection:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/flow_collection
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidFlowCollection:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/flow_collection
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidFlowCollection:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/flow_collection
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidFlowCollection:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/flow_collection
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidMaxBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/max_bit_rate
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidMaxBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/max_bit_rate
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidMaxBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/max_bit_rate
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidMaxBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/max_bit_rate
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidAvgBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/avg_bit_rate
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidAvgBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/avg_bit_rate
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidAvgBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/avg_bit_rate
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        deleteFlowsFlowidAvgBitRate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/avg_bit_rate
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]
        headFlowsFlowidReadonly:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/read_only
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidReadonly:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/read_only
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        putFlowsFlowidReadonly:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/read_only
            Method: Put
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Put]
        postFlowsFlowidStorage:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/storage
            Method: Post
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Post]

  FlowSegmentsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W76
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_flow_segments/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-segments
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          EVENT_BUS: !Ref EventBus
          SERVICE_TABLE: !Ref ServiceTable
          SEGMENTS_TABLE: !Ref FlowSegmentsTable
          STORAGE_TABLE: !Ref FlowStorageTable
          BUCKET: !Ref MediaStorageBucket
          BUCKET_REGION: !Ref AWS::Region
          S3_QUEUE_URL: !Ref CleanupS3Queue
          DELETE_QUEUE_URL: !Ref DeleteRequestQueue
          COGNITO_LAMBDA_NAME: !Ref CognitoUtilsFunction
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EventBus.Arn
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt CognitoUtilsFunction.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt FlowSegmentsTable.Arn
                - !Sub ${FlowSegmentsTable.Arn}/index/object-id-index
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt FlowStorageTable.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt DeleteRequestQueue.Arn
                - !GetAtt CleanupS3Queue.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub ${MediaStorageBucket.Arn}/*
            - Effect: Allow
              Action:
                - neptune-db:ReadDataViaQuery
                - neptune-db:WriteDataViaQuery
                - neptune-db:DeleteDataViaQuery
              Resource: !Sub arn:${AWS::Partition}:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneStack.Outputs.ClusterResourceId}/*
              Condition:
                StringEquals:
                  neptune-db:QueryLanguage: OpenCypher
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt ServiceTable.Arn
      Events:
        headFlowsFlowidSegments:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/segments
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowsFlowidSegments:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/segments
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        postFlowsFlowidSegments:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/segments
            Method: Post
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Post]
        deleteFlowsFlowidSegments:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flows/{flowId}/segments
            Method: Delete
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Delete]

  ObjectsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W76
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_objects/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-segments
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          SEGMENTS_TABLE: !Ref FlowSegmentsTable
          STORAGE_TABLE: !Ref FlowStorageTable
          BUCKET: !Ref MediaStorageBucket
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub ${FlowSegmentsTable.Arn}/index/object-id-index
                - !GetAtt FlowStorageTable.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub ${MediaStorageBucket.Arn}/*
      Events:
        headMediaObjectInformation:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /objects/{objectId}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getMediaObjectInformation:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /objects/{objectId}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]

  FlowDeleteRequestsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api_flow_delete_requests/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-deletion
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - neptune-db:ReadDataViaQuery
                - neptune-db:WriteDataViaQuery
                - neptune-db:DeleteDataViaQuery
              Resource: !Sub arn:${AWS::Partition}:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneStack.Outputs.ClusterResourceId}/*
              Condition:
                StringEquals:
                  neptune-db:QueryLanguage: OpenCypher
      Events:
        headFlowDeleteRequests:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flow-delete-requests
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowDeleteRequests:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flow-delete-requests
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]
        headFlowDeleteRequestsRequestId:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flow-delete-requests/{request-id}
            Method: Head
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Head]
        getFlowDeleteRequestsRequestId:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /flow-delete-requests/{request-id}
            Method: Get
            Auth:
              Authorizer: Authorizor
              AuthorizationScopes:
                - !FindInMap [OAuth, Scopes, CognitoAdmin]
                - !FindInMap [OAuth, Scopes, Get]

  WebhooksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/webhooks/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-webhooks
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          SERVICE_TABLE: !Ref ServiceTable
          WEBHOOKS_TABLE: !Ref WebhooksTable
          BUCKET: !Ref MediaStorageBucket
          BUCKET_REGION: !Ref AWS::Region
          WEBHOOKS_QUEUE_URL: !Ref WebhooksDeliveryQueue
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt WebhooksTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt ServiceTable.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub ${MediaStorageBucket.Arn}/*
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt WebhooksDeliveryQueue.Arn
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            RuleName: !Sub ${AWS::StackName}-events
            EventBusName: !Ref EventBus
            Pattern:
              source:
                - tams.api
    Condition: SupportWebhooks

  WebhooksDeliveryFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      VpcConfig: !Ref AWS::NoValue
      CodeUri: functions/webhooks_delivery/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-webhooks-delivery
          POWERTOOLS_METRICS_NAMESPACE: TAMS
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WebhooksDeliveryQueue.Arn
            BatchSize: 10
            Enabled: True
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Condition: SupportWebhooks

  SqsDeleteRequestsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/sqs_delete_requests/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Timeout: 900
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-sqs-delete-requests
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          EVENT_BUS: !Ref EventBus
          SEGMENTS_TABLE: !Ref FlowSegmentsTable
          STORAGE_TABLE: !Ref FlowStorageTable
          S3_QUEUE_URL: !Ref CleanupS3Queue
          DELETE_QUEUE_URL: !Ref DeleteRequestQueue
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EventBus.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt FlowSegmentsTable.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt CleanupS3Queue.Arn
            - Effect: Allow
              Action:
                - neptune-db:ReadDataViaQuery
                - neptune-db:WriteDataViaQuery
                - neptune-db:DeleteDataViaQuery
              Resource: !Sub arn:${AWS::Partition}:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneStack.Outputs.ClusterResourceId}/*
              Condition:
                StringEquals:
                  neptune-db:QueryLanguage: OpenCypher
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeleteRequestQueue.Arn
            BatchSize: 10
            Enabled: True
            FunctionResponseTypes:
              - ReportBatchItemFailures

  SqsObjectCleanupFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Vpc defined in Globals section
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/sqs_object_cleanup/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:18
        - !Ref UtilsLayer
      Timeout: 900
      Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: tams-cleanup
          POWERTOOLS_METRICS_NAMESPACE: TAMS
          NEPTUNE_ENDPOINT: !GetAtt NeptuneStack.Outputs.Endpoint
          SEGMENTS_TABLE: !Ref FlowSegmentsTable
          STORAGE_TABLE: !Ref FlowStorageTable
          BUCKET: !Ref MediaStorageBucket
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub ${FlowSegmentsTable.Arn}/index/object-id-index
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt FlowStorageTable.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
              Resource:
                - !Sub ${MediaStorageBucket.Arn}/*
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CleanupS3Queue.Arn
            BatchSize: 10
            Enabled: True
            FunctionResponseTypes:
              - ReportBatchItemFailures

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      Schema:
        - Name: email
          Required: True
          Mutable: True
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub
        - ${AWS::AccountId}-tams-${id}
        - id: !Select [4, !Split ['-', !Select [2, !Split [/, !Ref 'AWS::StackId']]]]

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref UserPool
      Name: tams-api
      Identifier: tams-api
      Scopes:
        - ScopeName: read
          ScopeDescription: Read access
        - ScopeName: write
          ScopeDescription: Write access
        - ScopeName: delete
          ScopeDescription: Delete access

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPoolResourceServer
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: server-to-server
      GenerateSecret: True
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AuthSessionValidity: 3
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        RefreshToken: days
        AccessToken: minutes
        IdToken: minutes
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlowsUserPoolClient: True
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - !FindInMap [OAuth, Scopes, Head]
        - !FindInMap [OAuth, Scopes, Get]
        - !FindInMap [OAuth, Scopes, Put]
        - !FindInMap [OAuth, Scopes, Post]
        - !FindInMap [OAuth, Scopes, Delete]

  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: web-client
      GenerateSecret: False
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AuthSessionValidity: 3
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        RefreshToken: days
        AccessToken: minutes
        IdToken: minutes
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - !FindInMap [OAuth, Scopes, CognitoAdmin]
      CallbackURLs:
        - https://localhost
      LogoutURLs:
        - https://localhost

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: tams-api-web-client
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClientWeb
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated

  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthRole.Arn

  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/vpc.yaml
    Condition: CreateVpc

  NeptuneStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/neptune.yaml
      Parameters:
        VpcId: !If [CreateVpc, !GetAtt VpcStack.Outputs.VpcId, !Ref VpcId]
        VpcAZs: !If [CreateVpc, !GetAtt VpcStack.Outputs.VpcAZs, !Join [',', !Ref VpcAZs]]
        PrivateSubnetIds: !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnetIds, !Join [',', !Ref PrivateSubnetIds]]
        LambdaSecurityGroupId: !Ref LambdaSecurityGroup
        ServerlessScalingConfiguration: !Ref NeptuneServerlessConfiguration

  WafStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/waf.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        ApiGwArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${Api}/stages/${Api.Stage}
    Condition: CreateWaf

Outputs:
  ApiEndpoint:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint

  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  TokenUrl:
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/token
    Export:
      Name: !Sub ${AWS::StackName}-TokenUrl

  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  UserPoolClientWebId:
    Value: !Ref UserPoolClientWeb

  IdentityPoolId:
    Value: !Ref IdentityPool

  MediaStorageBucket:
    Value: !Ref MediaStorageBucket
    Export:
      Name: !Sub ${AWS::StackName}-MediaStorageBucket

  FlowSegmentsTable:
    Value: !Ref FlowSegmentsTable

  WebhooksTable:
    Value: !If [SupportWebhooks, !Ref WebhooksTable, ""]

  CleanupS3QueueUrl:
    Value: !Ref CleanupS3Queue

  AuthRoleName:
    Value: !Ref AuthRole
    Export:
      Name: !Sub ${AWS::StackName}-AuthRoleName

  NeptuneEndpoint:
    Value: !GetAtt NeptuneStack.Outputs.Endpoint

  NeptuneClusterResourceId:
    Value: !GetAtt NeptuneStack.Outputs.ClusterResourceId

  LambdaSubnetIds:
    Value: !If [CreateVpc, !GetAtt VpcStack.Outputs.PrivateSubnetIds, !Join [',', !Ref PrivateSubnetIds]]

  LambdaSecurityGroup:
    Value: !Ref LambdaSecurityGroup

  UtilsLayerArn:
    Value: !Ref UtilsLayer

  DefaultStorageBackend:
    Value: !Sub
      - |-
        {
          "record_type": "storage-backend",
          "id": "${id}",
          "default_storage": true,
          "label": "${MediaStorageBucket}",
          "provider": "aws",
          "region": "${AWS::Region}",
          "store_product": "s3",
          "store_type": "http_object_store"
        }
      - id: !Select [2, !Split [/, !Ref 'AWS::StackId']]
